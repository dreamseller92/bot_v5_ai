import json
import os
import random
import time
from datetime import datetime
import concurrent.futures
from ppadb.client import Client as AdbClient

from misc import run_and_kill_instances as raki
from misc.common_scripts import where_i_am, get_instance_dict, this_fucking_game_run_or_not
from actions_manager.common_actions import find_and_click_image
from misc.ports_ex.get_bluestack_adb_ports import get_instanses_data
from actions_manager.dig import dig
from actions_manager.comander_skills import harvest, al_tech
import actions_manager.common_actions as ca
import actions_manager.colect_res as cr
from actions_manager.start import starting

from ui_manager import ask_to_continue, select_instances

# –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
state_file = 'state.json'
selected_instances_file = 'selected_instances.json'

def save_data(filename, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª."""
    with open(filename, 'w') as f:
        json.dump(data, f)

def load_data(filename, default_value):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    if os.path.exists(filename):
        with open(filename, 'r') as f:
            return json.load(f)
    return default_value

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
state = load_data(state_file, {"instances_done": []})
last_run = load_data('last_run.json', {})
selected_instances = load_data(selected_instances_file, [])

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Å—Ç–∞–Ω—Å–∞—Ö
get_instanses_data()
client = AdbClient(host="127.0.0.1", port=5037)
max_workers = 2
instance_dict = get_instance_dict()
instances = list(instance_dict.keys())

instance_queue_1143_steel = [inst for inst in instances if "1143" in instance_dict[inst]["Name"]]
instance_queue_1220_oil = [inst for inst in instances if "1220" in instance_dict[inst]["Name"]]


def perform_actions(instance):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ."""
    name, port = instance_dict[instance]["Name"], instance_dict[instance]["port"]

    print(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å: {name} (–ø–æ—Ä—Ç {port})")  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
    last_run[name] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    save_data('last_run.json', last_run)

    time.sleep(random.randint(1, 3))
    raki.run_instance(instance)

    while True:
        time.sleep(10)
        try:
            os.system(f"adb connect 127.0.0.1:{port}")
            device = client.device(f'127.0.0.1:{port}')
            screenshot = device.screencap()

            if this_fucking_game_run_or_not(screenshot):
                print(f"‚úÖ {name}: –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞, –∏—â–µ–º –∏–∫–æ–Ω–∫—É...")
                find_and_click_image(device, 'main_ico.png')

            if where_i_am(screenshot):
                print(f"üéÆ {name}: –í –∏–≥—Ä–µ, –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π")
                break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {name}: {e}")

    print(f"‚è≥ {name}: –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏—è...")

    starting(device)
    harvest(device)
    time.sleep(5)
    cr.collect_res(device)
    al_tech(device)
    dig(device)

    print(f"‚úÖ {name}: –ó–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å")
    raki.kill_instance(name)

    state["instances_done"].append(instance)
    save_data(state_file, state)
def main():
    global selected_instances

    choice = ask_to_continue()

    if choice == "startover":
        state["instances_done"] = []
        selected_instances = select_instances(instance_dict, instance_queue_1143_steel, instance_queue_1220_oil)
        save_data(selected_instances_file, selected_instances)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
    else:
        selected_instances = load_data(selected_instances_file, [])  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    instance_queue = [i for i in selected_instances if i not in state["instances_done"]]

    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        executor.map(perform_actions, instance_queue)

if __name__ == "__main__":
    main()